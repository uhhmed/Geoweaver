{"type":"process","lang":"python","description":"python","name":"testpython2","code":"from keras.datasets import cifar10\nfrom keras.optimizers import SGD\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.metrics import classification_report\nfrom nn.conv import shallownet\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nprint(\"[INFO] : Load datasets and rescal it [0,1]....\")\n((trainX, trainY), (testX, testY)) = cifar10.load_data()\ntrainX = trainX.astype(float) / 255.\ntestX = testX.astype(float) / 255.\nprint(trainY)\n\nprint(\"[INFO] : Convert the labels from integers to vectors \")\nlb = LabelBinarizer()\ntrainY = lb.fit_transform(trainY)\ntestY = lb.transform(testY)\n\n# Classes Array\nlabelNames = [\"airplane\", \"automobile\", \"bird\", \"cat\", \"deer\", \"dog\", \"frog\", \"horse\", \"ship\", \"truck\"]\n\nsgd = SGD(lr=0.005)\nmodel = shallownet.ShallowNet.build(width=32,\n                                    height=32, depth=3, classes=len(labelNames))\nmodel.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\nH = model.fit(trainX, trainY, validation_data=(testX, testY), batch_size=32, epochs=40, verbose=1)\n\n\nprint('[[INFO] : Serializing network')\nmodel.save('shallownet_weights.hdf5')\n\nprint(\"[INFO] : network Evaluation... \")\npred = model.predict(testX)\nprint(classification_report(testY.argmax(axis=1), pred.argmax(axis=1), target_names=labelNames))\n\nprint(\"[INFO] : Draw Plot... for loss and Accuracy \")\nplt.style.use('ggplot')\nplt.figure()\nplt.plot(np.arange(0, 100), H.history['loss'], label=\"Train_loss\")\nplt.plot(np.arange(0, 100), H.history['val_loss'], label=\"Val_loss\")\nplt.plot(np.arange(0, 100), H.history['acc'], label=\"Train_Acc\")\nplt.plot(np.arange(0, 100), H.history['val_acc'], label=\"Val_acc\")\nplt.ylabel('Loss/Accuracy')\nplt.xlabel('Epochs #')\nplt.xlabel('Training Accuracy and Loss')\nplt.show()\nplt.savefig('cifar10.png')","owner":"111111","confidential":"FALSE"}